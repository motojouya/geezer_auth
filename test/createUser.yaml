desc: ユーザの作成
runners:
  req: http://localhost:${PORT}
  db: postgres://postgres:postgres@localhost:5432/geezer_auth?sslmode=disable
vars:
  email: "test01@example.com"
  name: "Test User"
  bot: false
  password: "password01"
steps:
  register_user:
    desc: ユーザ登録
    req:
      /user/register:
        post:
          body:
            application/json:
              email: "{{ vars.email }}"
              name: "{{ vars.name }}"
              bot: "{{ vars.bot }}"
              password: "{{ vars.password }}"
    test: steps.register_user.res.status == 200
  bind_token:
    bind:
      identifier: steps.register_user.res.body.user.identifier
      access_token: steps.register_user.res.body.access_token
      refresh_token: steps.register_user.res.body.refresh_token
  get_token:
    desc: ユーザ登録でメール送信されるコードをDBから取得
    db:
      query: |
        SELECT verify_token
          FROM user_email AS ue
         INNER JOIN users AS u
                 ON ue.user_persist_key = u.persist_key
         WHERE u.identifier = '{{ identifier }}'
           AND ue.email = '{{ vars.email }}'
         LIMIT 1
  verify_email:
    desc: メールアドレスの確認
    req:
      /user/verify_email:
        post:
          headers:
            Authorization: "Bearer {{ access_token }}"
          body:
            application/json:
              email: "{{ vars.email }}"
              verify_token: "{{ steps.get_token.rows[0].verify_token }}"
    test: steps.verify_email.res.status == 200
  get_user:
    desc: ユーザ情報の取得
    req:
      /user/self:
        get:
          headers:
            Authorization: "Bearer {{ access_token }}"
    test: |
      steps.get_user.res.status == 200
      && steps.get_user.res.body.user.email == vars.email
      && steps.get_user.res.body.user.name == vars.name
      && steps.get_user.res.body.user.bot == vars.bot
      && steps.get_user.res.body.user.identifier_email == vars.email
